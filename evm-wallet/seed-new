#!/usr/bin/env node

//
// SPDX-License-Identifier: AGPL-3.0-or-later
//

const
  { ethers } =
    require(
      "ethers");
_ethers = 
  ethers;
_Wallet =
  _ethers.Wallet;
const
  _fs =
    require(
      'fs');
_path =
  require(
    'path');
const 
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_app_name_get = 
  _libcrash._app_name_get;
_msg_info = 
  _libcrash._msg_info;
_msg_info_obj = 
  _libcrash._msg_info_obj;
_msg_error = 
  _libcrash._msg_error;
const 
  _fs_utils =
    require(
      '../libcrash-js/fs-utils');
_dirname =
  _fs_utils._dirname
_file_exists =
  _fs_utils._file_exists
_file_write =
  _fs_utils._file_write

function
  _global_variables() {
  app_name =
    "seed-new";
  seed_path =
    "";
  quiet =
    "";
}

function
  _dir_missing_error(
    _dir) {
  let
    _msg,
    _template;
  _template =
    "the directory '{_dir}' does not exist."
  _msg =
    _template.replaceAll(
      "{_dir}",
      _dir);
  _msg_error(
    _msg,
    1)
}

function
  _msg_info_seed_write(
    _path) {
  let
    _msg,
    _template;
  _template =
    "writing seed to '{_path}'."
  _msg =
    _template.replaceAll(
      "{_path}",
      _path);
  _msg_info(
    _msg);
}

function
  _msg_info_seed_written(
    _path) {
  let
    _msg,
    _template;
  _template =
    "seed written to '{_path}'."
  _msg =
    _template.replaceAll(
      "{_path}",
      _path);
  _msg_info(
    _msg);
}

function
  _mkseed(
    _path) {
  let
    _dir,
    _dir_exists,
    _phrase,
    _wallet;
  _wallet =
    _Wallet.createRandom();
  _phrase =
    _wallet.mnemonic.phrase;
  if ( _path != "" ) {
    _dir =
      _dirname(
        _path);
    _dir_exists =
      _file_exists(
        _dir);
    if ( ! _dir_exists ) {
      _dir_missing_error(
        _dir);
    }
    else {
      if ( quiet != "y" ) {
	_msg_info_seed_write(
	  _path);
      }
    }
    _file_write(
      _path,
      _phrase);
    if ( quiet != "y" ) {
      _msg_info_seed_written(
        _path);
    }
  }
  else {
    console.log(
      _phrase);
  }
}

function
  _config_show() {
  let
    _line,
    _text;
  _text = [
    "        Seed path: {seed_path}".replaceAll(
      "{seed_path}",
      seed_path),
  ]
  for ( _line in _text ) {
    _msg_info(
      _line);
  }
}


function
  _usage() {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  mkseed",
    "    (<path>)",
    "    (<verbose>)"];
  for ( _line in _text ) {
    _msg_info(
      _line);
  }
  process.exit();
}

function
  _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        seed_path = _value;
      }
      if ( _index == 3 ) {
        quiet = _value;
      }
  });
  if ( wallet_path == "-h" ) {
    _usage();
  }
}

_global_variables();
_cmdline_parse();
_mkseed(
  seed_path);

// console.log('wallet.address:', wallet.address)
// console.log('wallet.mnemonic.phrase:', wallet.mnemonic.phrase)
// console.log('wallet.privateKey:', wallet.privateKey)
