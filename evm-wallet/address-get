#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_dirname =
  _libcrash._dirname;
_file_read =
  _libcrash._file_read;
_file_write =
  _libcrash._file_write;
_path_join =
  _libcrash._path_join;
_msg_info =
  _libcrash._msg_info;
_msg_info_obj =
  _libcrash._msg_info_obj;
_msg_error =
  _libcrash._msg_error;
const
  _wallet_get_module =
    require(
      '../evm-wallet/wallet-get');
_wallet_get =
  _wallet_get_module._wallet_get;
const
  _network_provider =
    require(
      '../evm-wallet/network-provider');
_provider_get =
  _network_provider._provider_get;
_msg_info_provider_generated =
  _network_provider._msg_info_provider_generated;


function
  _global_variables() {
  app_name =
    "address-get";
  method_args =
    [];
  wallet_seed =
    "";
  target_network =
    "";
  api_key_path =
    "";
  chain_id =
    "";
  chain_name =
    "";
  output_file =
    "";
  quiet =
    "";
}


async function
  _address_get(
    _wallet_seed,
    _target_network,
    _api_key_path,
    _chain_id,
    _chain_name,
    _output_file) {
  let
    _address,
    _api_key,
    _provider_get_opts,
    _wallet_dir,
    _wallet_password,
    _wallet_path_list;
  _wallet_password =
    "";
  _wallet_dir =
    _dirname(
      _wallet_seed);
  _wallet_path_list = [
    _wallet_dir,
    "wallet.dat"
  ];
  _wallet_path =
    _path_join(
      _wallet_path_list);
  _api_key =
    "";
  if ( _api_key_path != "" ) {
    _api_key =
      _file_read(
        _api_key_path);
  }
  _provider_get_opts = [
    _target_network,
    _api_key,
    _chain_id,
    _chain_name
  ];
  _provider =
    _provider_get.apply(
      null,
      _provider_get_opts);
  _msg_info_provider_generated(
    _provider);
  _wallet_get_opts = [
    _wallet_path,
    _wallet_password,
    _wallet_seed,
    _provider
  ];
  _wallet =
    _wallet_get.apply(
      null,
      _wallet_get_opts);
  _address =
    _wallet.address;
  if ( _output_file != undefined &&
       _output_file != "" ) {
    _file_write(
      _output_file,
      _address);
  }
  return _address;
}

function
  _config_show() {
  let
    _line,
    _text;
  _text = [
    "      Wallet seed: {wallet_seed}".replaceAll(
      "{wallet_seed}",
      wallet_seed),
    "   Target network: {target_network}".replaceAll(
      "{target_network}",
      target_network),
    "          API key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path),
    "      Output file: {output_file}".replace(
      "{output_file}",
      output_file)
  ]
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
}

function
  _usage(
    _exit_code) {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  address-get",
    "    <quiet>",
    "    <seed_path>",
    "    (<target_network>)",
    "    (<api_key_path>)",
    "    (<output_file>)"
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit_code);
}


function _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
	  _value;
      }
      if ( _index == 3 ) {
        wallet_seed =
          _value;
      }
      if ( _index == 4 ) {
        target_network =
          _value;
      }
      if ( _index == 5 ) {
        api_key_path =
          _value;
      }
      if ( _index == 6 ) {
        output_file =
          _value;
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        quiet =
          "n";
        _usage(
          0);
      }
  });
  if ( wallet_seed == "" ) {
    _msg_error(
      "No arguments given.",
      0);
    quiet =
      "n";
    _usage(
      0);
  }
}

function
  _overrides_set() {
  // if ( target_network == "" ) {
  //   target_network = "https://127.0.0.1";
  // }
  if ( chain_id == "" ) {
    chain_id = "100";
  }
}

async function 
  _address_get_cmdline(
    _app_opts) {
  let
    _address;
  _address =
    await _address_get.apply(
      null,
      _app_opts);
  console.log(
    _address);
}

if ( _cmdline_check(
       "address-get") ) {
  _global_variables();
  _cmdline_parse();
  _overrides_set();
  _config_show();
  app_opts = [
    wallet_seed,
    target_network,
    api_key_path,
    chain_id,
    chain_name,
    output_file
  ];
  _address_get_cmdline(
    app_opts);
}

module.exports = {
  _address_get:
    _address_get
};
