#!/usr/bin/env node

//
// SPDX-License-Identifier: AGPL-3.0-or-later
//

const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
const
  _fs_utils =
    require(
      '../libcrash-js/fs-utils');
_dirname =
  _fs_utils._dirname;
_file_read =
  _fs_utils._file_read;
_path_join =
  _fs_utils._path_join;
const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_msg_info =
  _libcrash._msg_info;
_msg_info_obj =
  _libcrash._msg_info_obj;
_msg_error =
  _libcrash._msg_error;
const
  _wallet_get_module =
    require(
      '../evm-wallet/wallet-get');
_wallet_get =
  _wallet_get_module._wallet_get;
const
  _network_provider =
    require(
      '../evm-wallet/network-provider');
_provider_get =
  _network_provider._provider_get;


function
  _global_variables() {
  app_name =
    "address-get";
  method_args =
    [];
  wallet_seed =
    "";
  target_network =
    "";
  api_key =
    "";
  quiet =
    "";
}


function
  _msg_info_provider_generated(
    _provider) {
  let
    _msg,
    _template;
  _template =
    "provider '{_provider}' generated";
  _msg =
    _template.replaceAll(
      "{_provider}",
      _provider);
  _msg_error(
    _msg,
    1)
}


async function
  _address_get(
    _wallet_seed,
    _target_network,
    _api_key_path) {
  let
    _wallet_dir,
    _wallet_password,
    _wallet_path_list;
  _wallet_password =
    "";
  _wallet_dir =
    _dirname(
      _wallet_seed);
  _wallet_path_list = [
    _wallet_dir,
    "wallet.dat"
  ];
  _wallet_path =
    _path_join(
      _wallet_path_list);
  _api_key =
    _file_read(
      _api_key_path);
  _provider =
    _provider_get(
      _target_network,
      _api_key);
  _msg_info_provider_generated(
    _provider);
  _wallet_get_opts = [
    _wallet_path,
    _wallet_password,
    _wallet_seed,
    _provider
  ];
  _wallet =
    _wallet_get.apply(
      null,
      _wallet_get_opts);
  console.log(
    _wallet.address);
}

function
  _config_show() {
  let
    _line,
    _text;
  _text = [
    "      Wallet seed: {wallet_seed}".replaceAll(
      "{wallet_seed}",
      wallet_seed),
    "   Target network: {target_network}".replaceAll(
      "{target_network}",
      target_network),
    "          API Key: {api_key}".replace(
      "{api_key}",
      api_key)
  ]
  for ( _line in _text ) {
    _msg_info(
      _line);
  }
}

function
  _usage() {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  address-view",
    "    <seed_path>",
    "    (<target_network>)",
    "    (<api_key>)"
  ];
  for ( _line in _text ) {
    console.log(
      _line);
  }
  process.exit();
}



function _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        wallet_seed =
	  _value;
      }
      if ( _index == 3 ) {
        target_network =
	  _value;
      }
      if ( _index == 4 ) {
        api_key =
	  _value;
      }
      if ( _value == 5 ) {
        quiet =
	  "n";
      }
  });
  if ( wallet_seed == "" ) {
    _usage();
  }
}

_global_variables();

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  app_opts = [
    wallet_seed,
    target_network,
    api_key
  ];
  _address_get.apply(
    null,
    app_opts);
}

module.exports = {
  _address_get:
    _address_get
};
