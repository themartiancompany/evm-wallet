#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
_wei_to_ether =
  _ethers.formatEther;
const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_dirname =
  _libcrash._dirname;
_file_read =
  _libcrash._file_read;
_path_join =
  _libcrash._path_join;
_msg_info =
  _libcrash._msg_info;
_msg_info_obj =
  _libcrash._msg_info_obj;
_msg_error =
  _libcrash._msg_error;
const
  _wallet_get_module =
    require(
      '../evm-wallet/wallet-get');
_wallet_get =
  _wallet_get_module._wallet_get;
const
  _network_provider =
    require(
      '../evm-wallet/network-provider');
_provider_get =
  _network_provider._provider_get;
_msg_info_provider_generated =
  _network_provider._msg_info_provider_generated;


function
  _global_variables() {
  app_name =
    "balance-get";
  method_args =
    [];
  wallet_seed =
    "";
  target_network =
    "";
  api_key =
    "";
  target_address =
    "";
  display_unit =
    "";
  quiet =
    "";
}


async function
  _balance_get(
    _wallet_seed,
    _target_network,
    _api_key_path,
    _target_address,
    _display_unit) {
  let
    _balance,
    _balance_eth,
    _balance_wei,
    _provider_get_opts,
    _wallet_dir,
    _wallet_password,
    _wallet_path_list;
  _wallet_password =
    "";
  _wallet_dir =
    _dirname(
      _wallet_seed);
  _wallet_path_list = [
    _wallet_dir,
    "wallet.dat"
  ];
  _wallet_path =
    _path_join(
      _wallet_path_list);
  _provider_get_opts= [
    _target_network,
  ];
  if ( _api_key_path != "" ) {
    _api_key =
      _file_read(
        _api_key_path);
    _provider_get_opts.push(
      _api_key);
  }
  _provider =
    _provider_get.apply(
      null,
      _provider_get_opts);
  _msg_info_provider_generated(
    _provider);
  if ( target_address == "" ) {
    _wallet_get_opts = [
      _wallet_path,
      _wallet_password,
      _wallet_seed,
      _provider
    ];
    _wallet =
      _wallet_get.apply(
        null,
        _wallet_get_opts);
    _target_address =
      _wallet.address;
  }
  _balance_wei = await
    _provider.getBalance(
      _target_address);
  if ( _display_unit == "" ) {
    _display_unit =
      "ether";
  }
  if ( _display_unit == "wei" ) {
    _balance =
      _balance_wei;
  }
  else if ( _display_unit == "ether" ) {
    _balance_ether =
      _wei_to_ether(
        _balance_wei);
    _balance =
      _balance_ether;
  }
  return _balance;
}

function
  _overrides_set() {
  if ( display_unit == "" ) {
    display_unit = "ether";
  }
}

function
  _config_show() {
  let
    _line,
    _text;
  _text = [
    "      Wallet seed: {wallet_seed}".replaceAll(
      "{wallet_seed}",
      wallet_seed),
    "   Target network: {target_network}".replaceAll(
      "{target_network}",
      target_network),
    "          API Key: {api_key}".replace(
      "{api_key}",
      api_key),
    "   Target address: {target_address}".replace(
      "{target_address}",
      target_address),
    "     Display unit: {display_unit}".replace(
      "{display_unit}",
      display_unit)
  ]
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
}

function
  _usage() {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  balance-get",
    "    <quiet>",
    "    <seed_path>",
    "    (<target_network>)",
    "    (<api_key>)",
    "    (<target_address>)",
    "    (<display_unit>)",
    "",
    "Args:",
    "  <seed_path>         Path on disk of the file",
    "                      containing the seed phrase.",
    "  <target_network>    Name of the network to connect to.",
    "  <api_key>           Path on disk of the API key for",
    "                      the network service provider.",
    "  <target_address>    Address of which to return",
    "                      the balance of.",
    "                      Default: the wallet address.",
    "  <display_unit>      Can be 'wei' or 'ether'.",
    "                      Default: 'ether'",
  ];
  for ( _line of _text ) {
    console.log(
      _line);
  }
  process.exit();
}



function _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
	  _value;
      }
      if ( _index == 3 ) {
        wallet_seed =
	  _value;
      }
      if ( _index == 4 ) {
        target_network =
	  _value;
      }
      if ( _index == 5 ) {
        api_key =
	  _value;
      }
      if ( _index == 6 ) {
        target_address =
	  _value;
      }
      if ( _index == 7 ) {
        display_unit =
	  _value;
      }
  });
  if ( wallet_seed == "" &&
       target_address == "") {
    _usage();
  }
}

async function
  _balance_get_cmdline(
    _app_opts) {
  let
    _balance;
  _balance =
    await _balance_get.apply(
      null,
      _app_opts);
  process.stdout.write(
    _balance.toString());
}

_global_variables();

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  app_opts = [
    wallet_seed,
    target_network,
    api_key,
    target_address,
    display_unit
  ];
  _balance_get_cmdline(
    app_opts);
}

module.exports = {
  _balance_get:
    _balance_get
};
