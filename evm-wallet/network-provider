#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
_get_default_provider =
  _ethers.getDefaultProvider;
_network_class =
  _ethers.Network;
const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_cmdline_check =
  _libcrash._cmdline_check;

function
  _global_variables() {
  app_name =
    "network-provider";
  target_network =
    "";
  api_key =
    "";
  chain_id =
    "";
  chain_name =
    "";
}


function
  _msg_info_provider_generated(
    _provider) {
  let
    _msg,
    _template;
  _template =
    "Provider '{_provider}' generated.";
  _msg =
    _template.replaceAll(
      "{_provider}",
      _provider);
  _msg_info(
    _msg);
}

function
  _provider_get(
    _target_network,
    _api_key,
    _chain_id,
    _chain_name) {
  let
    _default_network,
    _get_default_provider_opts,
    _network,
    _network_new_opts,
    _provider,
    _provider_opts,
    _rpc;
  _get_default_provider_opts =
    [];
  _network_new_opts = [
    null
  ];
  _provider_opts =
    {};
  if ( _target_network == "gnosis" ) {
    _rpc =
      "https://rpc.gnosischain.com";
    _default_network = _rpc;
  } 
  else if ( _target_network == "ethereum" ) {
    if ( _api_key != "" ) {
      _default_network =
        "etherscan";
      _provider_opts = {
        'etherscan':
          _api_key,
        'exclusive': [
          "etherscan",
          "infura"
        ]
      };
    }
    else {
      _rpc =
        "https://rpc.ankr.com/eth";
      _default_network =
        _rpc;
    }
  }
  else {
    _default_network =
      _target_network;
  }
  _get_default_provider_opts.push(
    _default_network);
  if ( _chain_name != "" ||
       _chain_name != undefined ) {
    _network_new_opts.push(
      _chain_name);
  }
  if ( _chain_id != "" || 
       _chain_id != undefined ) {
    _chain_id =
      Number(
        _chain_id);
    _network_new_opts.push(
      _chain_id);
  }
  if ( 0 < _network_new_opts.length ) {
    _network =
      new (Function.prototype.bind.apply(
        _network_class,
	_network_new_opts));
    _get_default_provider_opts.push(
     _network); 
  }
  _get_default_provider_opts.push(
    _provider_opts);
  _provider = _get_default_provider.apply(
    null,
    _get_default_provider_opts);
  _msg_info_provider_generated(
    _provider);
  return _provider;
}

function
  _config_show() {
  let
    _line,
    _text;
  _text = [
    "   Target network: {target_network}".replaceAll(
      "{target_network}",
      target_network),
    "          API Key: {api_key}".replace(
      "{api_key}",
      api_key),
    "        Chain ID: {chain_id}".replace(
      "{chain_id}",
      chain_id),
    "      Chain Name: {chain_name}".replace(
      "{chain_name}",
      chain_name)
  ]
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
}

function
  _usage(
    _exit_code) {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  network-provider",
    "    <target_network>",
    "    <api_key>",
    "    (<chain_id>)",
    "    (<chain_name>)",
    "",
    "Args:",
    "  <target_network>                 Network on which the transaction",
    "                                   resides.",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <chain_id>                       Chain ID for the network.",
    "  <chain_name>                     Name for the network.",
    "",
    "  Options:",
    "    -h                             This help."
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit_code);
}


function
  _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        target_network =
          _value;
      }
      if ( _index == 3 ) {
        api_key =
          _value;
      }
      if ( _index == 4 ) {
        chain_id =
          _value;
      }
      if ( _index == 5 ) {
        chain_name =
          _value;
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        quiet =
          "n";
        _usage(
          0);
      }
    }
  );
  if ( target_network == "" ) {
    quiet =
      "n";
    _usage(
      1);
  }
}

function
  _overrides_set() {
  if ( target_network == "" ) {
    // But really.
    target_network =
      "gnosis";
  }
}

if ( _cmdline_check(
       "network-provider") ) {
  _global_variables();
  _cmdline_parse();
  _overrides_set();
  _config_show();
  app_opts = [
    target_network,
    api_key,
    chain_id,
    chain_name
  ];
  _provider_get.apply(
    null,
    app_opts);
}

module.exports = {
  _provider_get:
    _provider_get,
  _msg_info_provider_generated:
    _msg_info_provider_generated,
};

