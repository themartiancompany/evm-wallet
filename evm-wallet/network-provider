#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
_get_default_provider =
  _ethers.getDefaultProvider;
const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_app_name_get =
  _libcrash._app_name_get;


function
  _global_variables() {
  app_name =
    "network-provider";
  target_network =
    '';
  api_key =
    '';
}


function
  _msg_info_provider_generated(
    _provider) {
  let
    _msg,
    _template;
  _template =
    "provider '{_provider}' generated";
  _msg =
    _template.replaceAll(
      "{_provider}",
      _provider);
  _msg_info(
    _msg);
}


function
  _provider_get(
    _network,
    _api_key) {
  let
    _default_network,
    _provider,
    _provider_opts,
    _rpc;
  _provider_opts =
    {};
  if ( _network == "gnosis" ) {
    _rpc =
      "https://rpc.gnosischain.com";
    _default_network = _rpc;
  } 
  else if ( _network == "ethereum" ) {
    if ( _api_key != "" ) {
      _default_network =
        "etherscan";
      _provider_opts = {
        'etherscan':
	  _api_key,
        'exclusive': [
          "etherscan",
          "infura"
        ]
      };
    }
    else {
      _rpc =
        "https://rpc.ankr.com/eth";
      _default_network =
        _rpc;
    }
  }
  else {
    _default_network =
      _network;
  }
  _provider = _get_default_provider(
    _default_network,
    _provider_opts);
  _msg_info_provider_generated(
    _provider);
  return _provider;
}

function
  _config_show() {
  let
    _line,
    _text;
  _text = [
    "   Target network: {target_network}".replaceAll(
      "{target_network}",
      target_network),
    "          API Key: {api_key}".replace(
      "{api_key}",
      api_key)
  ]
  for ( _line in _text ) {
    _msg_info(
      _line);
  }
}

function
  _usage() {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  network-provider",
    "    <target_network>",
    "    <api_key>"
  ];
  for ( _line in _text ) {
    _msg_info(
      _line);
  }
  process.exit();
}


function
  _cmdline_parse() {
  quiet =
    "y";
  target_network =
    "gnosis";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        target_network =
	  _value;
      }
      if ( _index == 3 ) {
        api_key =
	  _value;
      }
  });
}

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  app_opts = [
    target_network,
    api_key
  ];
  _provider_get.apply(
    null,
    app_opts);
}

module.exports = {
  _provider_get:
    _provider_get,
  _msg_info_provider_generated:
    _msg_info_provider_generated,
};

