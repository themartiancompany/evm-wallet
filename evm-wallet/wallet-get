#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const 
  { ethers } =
    require(
      "ethers");
_ethers = 
  ethers;
_hdnode_wallet =
  _ethers.HDNodeWallet
const 
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_cmdline_check =
  _libcrash._cmdline_check;
_msg_info = 
  _libcrash._msg_info;
_msg_info_obj = 
  _libcrash._msg_info_obj;
_msg_error = 
  _libcrash._msg_error;
const 
  _fs_utils =
    require(
      '../libcrash-js/fs-utils');
_file_exists =
  _fs_utils._file_exists
_file_read =
  _fs_utils._file_read;


function _global_variables() {
  app_name =
    "wallet-get";
}


function _wallet_exists(
  _path) {
  let
    _exists,
    _template,
    _msg; 
  _exists =
    _file_exists(
      _path);
  if ( _exists == true ) {
    _template =
      "Wallet '{_path}' already exists.";
    _msg =
      _template.replaceAll(
        '{_path}',
      _path);
    _msg_error(
      _msg,
      "1");
  }
}


function
  _msg_error_seed_empty(
    _seed) {
  let
    _msg,
    _template;
  _template =
    "the seed '{_seed}' is empty.";
  _msg =
    _template.replaceAll(
      "{_seed}",
      _seed);
  _msg_error(
    _msg,
    1)
}


function
  _seed_missing_error(
    _seed) {
  let
    _msg,
    _template;
  _template =
    "the seed '{_seed}' does not exist.";
  _msg =
    _template.replaceAll(
      "{_seed}",
      _seed);
  _msg_error(
    _msg,
    1)
}


function _wallet_get(
  _path,
  _password,
  _seed,
  _provider) {
  let
    _password_show,
    _phrase,
    _phrase_show,
    _seed_exists;
  _password_show =
    "";
  if ( _password != "" ) {
    _password_show="****" 
  }
  _msg_info_obj(
    'Wallet path',
    _path);
  _msg_info_obj(
    'Wallet password',
    _password_show);
  _wallet_exists(
    _path);
  _phrase =
    "";
  if ( _seed != "" ) {
    _seed_exists =
      _file_exists(
        _seed);
    if ( _seed_exists == false ) {
      _seed_missing_error(
        _seed);
    }
    _msg_info_obj(
      'Wallet seed',
      _seed);
    _phrase =
      _file_read(
        _seed); 
  }
  else if ( _seed == "" ) {
    _msg_error_seed_empty(
      _seed);
  }
  if ( _phrase != "" ) {
    _phrase_show="****" 
  }
  _msg_info_obj(
    'Seed phrase',
    _phrase_show);
  _wallet =
    _hdnode_wallet.fromPhrase(
      _phrase);
  _wallet.provider =
    _provider;
  _signer =
    _wallet.connect(
      _provider);
  return _signer;
}

if ( _cmdline_check(
       "wallet-get") ) {
  _global_variables();
}

module.exports = {
  _wallet_get:
    _wallet_get
};
