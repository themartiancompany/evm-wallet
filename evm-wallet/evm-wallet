#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  call_date=''
  target_command=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  target_network=""
  api_key=""
  wallet_name=""
  target_key=""
  target_value=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'node' \
    'nodejs'
  _check_cmd \
    "evm-chains-info"
  _check_cmd \
    "evm-chains-explorers"
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_balance_send_cmd() {
  local \
    _lib
  _lib="$( \
    _get_lib)/evm-wallet"
  echo \
    "${_lib}/balance-send"
}

_wallet_key_cmd() {
  local \
    _key="${1}" \
    _command="${2}" \
    _lib
  _lib="$( \
    _get_lib)/evm-wallet"
  echo \
    "${_lib}/${_key}-${_command}"
}

_node_run() {
  local \
    _cmd="${1}" \
    _args=() \
    _node_path \
    _lib
  shift \
    1
  _args=(
    "$@"
  )
  _lib="$( \
    _get_lib)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
  node \
    "${_cmd}" \
      "${_args[@]}" || \
    true
}


_network_setup() {
  local \
    _chain="${1}" \
    _chain_name \
    _chain_id \
    _rpc \
    _msg=()
  _msg=(
    "looking for info on EVM blockchain"
    "'${_chain}'"
  )
  _msg_info \
    "${_msg[*]}"
  _chain_id="$( \
    evm-chains-info \
      -o \
        "id" \
      "${_chain}")"
  if [[ "${_chain_id}" != "" ]]; then
    _chain_name="$( \
      evm-chains-info \
        -o \
          "name" \
        "${_chain}" 2>/dev/null || \
        true)"
    _msg=(
      "Found blockchain '${_chain_name}'"
      "with id '${_chain_id}'"
      "Selecting RPC address with"
      "criterion 'kirsh'"
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="$( \
      evm-chains-info \
        -o \
          "rpc" \
        -s \
          "kirsh" \
        "${_chain}")"
  elif [[ "${_chain_id}" == "" ]]; then
    _msg=(
      "Found no known blockchain for input"
      "'${_chain}', interpreting given input"
      "as an rpc address for the selected"
      "network."
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="${_chain}"
  fi
  _msg=(
    "Selected RPC address"
    "'${_rpc}'"
  )
  _msg_info \
    "${_msg[*]}"
  _network_backend="${_rpc}"
}

_key_get() {
  local \
    _key="${1}"
  if [[ "${_key}" == "address" ]] || \
     [[ "${_key}" == "balance" ]]; then
    _cmd="$( \
      "_wallet_key_cmd" \
        "${_key}" \
        "get")"
    _args+=(
      "${quiet}"
      "${_wallet_seed}"
      "${_network_backend}"
      "${_api_key_path}"
    )
  elif [[ "${_key}" == "seed" ]]; then
    cat \
      "${_wallet_seed}"
    return \
      0
  elif [[ "${_key}" == "name" ]]; then
    echo \
      "${wallet_name}"
    return \
      0
  fi
}

_balance_send() {
  local \
    _target_address="${1}" \
    _target_amount="${2}"
  _cmd="$( \
    _balance_send_cmd)"
  _args+=(
    "${quiet}"
    "${_wallet_seed}"
    "${_target_address}"
    "${_target_amount}"
    "${_network_backend}"
    "${_api_key_path}"
  )
}

_evm_wallet() {
  local \
    _target_command="${1}" \
    _wallet_path="${2}" \
    _wallet_password="${3}" \
    _wallet_seed="${4}" \
    _network="${5}" \
    _api_key_path="${6}" \
    _target_key="${7}" \
    _target_value="${8}" \
    _command_args=() \
    _msg=() \
    _cmd \
    _args=() \
    _network_backend
  shift \
    8
  _command_args+=(
    "$@"
  )
  _network_setup \
    "${_network}"
  if [[ "${_target_command}" == "get" ]]; then
    "_key_${_target_command}" \
      "${_target_key}"
    if [[ "${_target_key}" == "name" ]]; then
      return \
        0
    fi
  elif [[ "${_target_command}" == "send" ]]; then
    _balance_send \
      "${_target_key}" \
      "${_target_value}"
  else
    _msg=(
      "unknown command '${_target_command}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  # if [[ "${quiet}" != "y" ]]; then
  #   _args+=(
  #     -v
  #   )
  # fi
  _node_run \
    "${_cmd}" \
    "${_args[@]}"
}

_wallet_path_get() {
  local \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="$( \
    _get_conf_dir_path)/${_name}.dat"
  echo \
    "${_path}"
}

_secret_get() {
  local \
    _secret="${1}" \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="$( \
    _get_conf_dir_path)/${_name}-${_secret}.txt"
  echo \
    "${_path}"
}

_api_key_auto_detect() {
  local \
    _chain="${1}" \
    _chain_name \
    _key \
    _msg=()
  _key="$( \
    evm-chains-explorers \
      -c \
        "${_chain}" \
      -s \
        'kirsh' \
      get \
        keys)"
  _msg_info "${_key}"
  _chain_name="$( \
    evm-chains-info \
      -o \
        "name" \
      "${_chain}")"
  if [[ "${_key}" == "" ]]; then
    _msg=(
      "Found no provider services"
      "keys for chain '${_chain_name}'."
      "Check available service"
      "providers with \"evm-chains-info"
      "-o explorers '${_chain}'\""
      "and add the relative api key in"
      "'<user_home>/.config/evm-chains-explorers/<service>/default.txt'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "api" \
    "key" \
    "${_key}"
}

_secret_auto_detect() {
  local \
    _secret="${1}" \
    _secret_type="${2}" \
    _dir \
    _key_gen_opts=() \
    _msg=()
  _path="$( \
    _secret_get \
      "${_secret}")"
  _dir="$( \
    dirname \
      "${_path}")"
  if [[ ! -e "${_path}" ]]; then
    _key_gen_opts+=(
      -t
        "${_secret_type}"
    )
    if [[ "${quiet}" == "n" ]]; then
      _key_gen_opts+=(
        -v
      )
    fi
    _msg=(
      "generating ${_secret} '${_path}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    key-gen \
      "${_key_gen_opts[@]}" \
      "${_path}"
    chmod \
      400 \
      "${_path}"
    _msg=(
      "${_secret} '${_path}' successfully generated"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "wallet" \
    "${_secret}" \
    "${_path}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "target" \
    "network" \
    "Gnosis"
  _set_override \
    "target" \
    "command" \
    "get"
  _api_key_auto_detect \
    "$(_get \
         "target" \
         "network")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get)"
  _secret_auto_detect \
    "seed" \
    "seed"
  _secret_auto_detect \
    "password" \
    "plain"
  _set_override \
    "target" \
    "key" \
    "name"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

EVM network wallet

Usage:
  $(_get "app" "name")
    [options]
    <command>
      (<command_args>)

  commands:
    get
      <wallet_name>
      <key>
    set
      <wallet_name>
      <key>
      <value>
    send
      <address>
      <amount>

  keys:
    address
    balance

  networks:
    all those supported by
    'evm-chains-info' as
    well as directly RPC address

  options:
     -w <wallet_path>     Wallet path.
                          Default: ${wallet_path}
     -p <wallet_password> Wallet password.
                          Default: ${wallet_password}
     -s <wallet_seed>     Wallet seed path.
                          Default: ${wallet_seed}
     -n <network>         EVM network name. Accepted values
                          are all those supported by
                          evm-chains-info and RPC addresses.
     -k <api_key>         Etherscan-like service key.
                          Default: ${api_key}
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _seed \
    _seed_show
  _seed="$( \
    _get \
      "wallet" \
      "seed")"
  if [[ "${_seed}" != "" ]]; then
    _seed_show="*******"
  fi
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   ${call_date}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "           Target command:   ${target_command}"
  _msg_info "               Target key:   ${target_key}"
  _msg_info "             Target value:   ${target_value}"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'w:p:s:n:k:cvh?' \
    arg; do
  case \
    "${arg}" in
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( 0 < $# )); then
  _set \
    "target" \
    "command" \
    "${1}"
fi
if (( 1 < $# )); then
  _set \
    "wallet" \
    "name" \
    "${2}"
fi
if (( 2 < $# )); then
  _set \
    "target" \
    "key" \
    "${3}"
fi
if (( 3 < $# )); then
  _set \
    "target" \
    "value" \
    "${4}"
fi
shift \
  4 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "${target_command}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${target_key}"
  "${target_value}"
)
_evm_wallet \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
