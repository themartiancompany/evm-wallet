#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
        "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  cache_dir=""
  target_networks=()
  networks_amount=""
  target_command=""
  target_key=""
  target_value=""
  currency_type=""
  currency_address=""
  networks_all=""
  rpc_selection=""
  explorer_selection=""
  retries_max=""
  measure_unit=""
  balance_lifespan=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'node-run'
  _check_cmd \
    "evm-chains-info"
  _check_cmd \
    "evm-chains-explorers"
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/${app_name}"
  echo \
    "${_dir}"
}

_balance_age_get() {
  local \
    _balance_file="${1}" \
    _now \
    _balance_modified \
    _msg=()
  _balance_age=""
  if [[ ! -e "${_balance_file}" ]]; then
    _msg=(
      "Balance for account"
      "'${_wallet_name}' never"
      "retrieved for network"
      "'${_target_network}'."
    )
  _msg_info \
    "${_msg[*]}"
  else 
    _now="$( \
      date \
      "+%s")"
    _balance_modified="$( \
      date \
        -r \
          "${_balance_file}" \
        "+%s")"
    _balance_age="$(( \
      "${_now}" - \
      "${_balance_modified}" ))"
  fi
}

_balance_send() {
  local \
    _currency_type="${1}" \
    _currency_address="${2}" \
    _target_address="${3}" \
    _target_amount="${4}" \
    _lib \
    _msg=()
  _lib="$( \
    _get_lib)/evm-wallet"
  _cmd=""
  if [[ "${_currency_type}" == "gas" ]]; then
    _cmd="${_lib}/balance-send"
    _args+=(
      "${quiet}"
      "${_wallet_seed}"
      "${_target_address}"
      "${_target_amount}"
      "${_rpc_backend}"
      "${_api_key_path}"
    )
  elif [[ "${_currency_type}" == "erc20" ]]; then
    _cmd="${_lib}/token-send"
    _args+=(
      "${quiet}"
      "${retries_max}"
      "${call_timeout}"
      "${wallet_seed}"
      "${api_key_path}"
      "${token_bytecode_path}"
      "${token_compiler_output_path}"
      "${measure_unit}"
      "${receipt_file_path}"
      "${target_address}"
      "${target_amount}"
    )
  fi
  _msg=(
    "Running send program"
    "'${_cmd}'"
    "with arguments '${_args[*]}'."
  )
  _msg_info \
    "${_msg[*]}"
}

_wallet_key_cmd() {
  local \
    _key="${1}" \
    _command="${2}" \
    _lib
  _lib="$( \
    _get_lib)/evm-wallet"
  echo \
    "${_lib}/${_key}-${_command}"
}

_balance_get_cmd_get() {
  local \
    _wallet_name="${1}" \
    _target_network="${2}" \
    _balance_age \
    _balance_file \
    _balance_dir \
    _rpc_backend
  _rpc_backend_get \
    "${_target_network}" \
    "${_rpc_selection}"
  _balance_file="${_cache_dir}/${_wallet_name}/${_target_network}"
  _balance_dir="$( \
    dirname \
      "${_balance_file}")"
  if [[ ! -d "${_cache_dir}" ]]; then
    _msg=(
      "Cache directory"
      "'${_cache_dir}'"
      "does not exist."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  mkdir \
    -p \
    "${_balance_dir}"
  _balance_update="true"
  _balance_age_get \
    "${_balance_file}"
  if [[ "${_balance_age}" != "" ]]; then
    if (( "${_balance_age}" < 3600 )); then
      _balance_update="false"
      _msg=(
        "Skipping balance update."
      )
      _msg_info \
        "${_msg[*]}"
    fi
  fi
  if [[ "${_balance_update}" == "true" ]]; then
    _cmd="$( \
      "_wallet_key_cmd" \
        "${_key}" \
        "get")"
    _args+=(
      "${quiet}"
      "${_wallet_seed}"
      "${_rpc_backend}"
      "${_api_key_path}"
      "${wallet_address}"
      "${measure_unit}"
      "${_balance_file}"
    )
  elif [[ "${_balance_update}" == "false" ]]; then
    cat \
      "${_balance_file}"
    exit \
      0
  fi
}

_key_get() {
  local \
    _key="${1}" \
    _output_file \
    _output_dir
  if [[ "${_key}" == "address" ]]; then
    _cmd="$( \
      "_wallet_key_cmd" \
        "${_key}" \
        "get")"
    _args+=(
      "${quiet}"
      "${_wallet_seed}"
      "${_rpc_backend}"
      "${_api_key_path}"
    )
  elif [[ "${_key}" == "balance" ]]; then
    # if [[ "${_networks_all}" == "n" ]]; then
    #   _target_networks=(
    #     "${_target_network}"
    #   )
    # fi
    _balance_get_cmd_get \
      "${wallet_name}" \
      "${_target_network}"
  elif [[ "${_key}" == "seed" ]]; then
    cat \
      "${_wallet_seed}"
    exit \
      0
  elif [[ "${_key}" == "name" ]]; then
    echo \
      "${wallet_name}"
    return \
      0
  fi
}

_evm_wallet() {
  local \
    _target_command="${1}" \
    _wallet_path="${2}" \
    _wallet_password="${3}" \
    _wallet_seed="${4}" \
    _cache_dir="${5}" \
    _networks_all="${6}" \
    _rpc_selection="${7}" \
    _api_key_path="${8}" \
    _retries_max="${9}" \
    _measure_unit="${10}" \
    _balance_lifespan="${11}" \
    _currency_type="${12}" \
    _currency_address="${13}" \
    _target_key="${14}" \
    _target_value="${15}" \
    _networks_amount="${16}" \
    _target_networks=() \
    _command_args=() \
    _target_networks=() \
    _msg=() \
    _cmd \
    _args=() \
    _network \
    _rpc_backend \
    _node_run_opts=() \
    _approve_call_opts=() \
    _rpc_backend
  shift \
    16
  for _network \
    in $(seq \
           "1" \
           "${_networks_amount}"); do
    _network="${1}"
    _target_networks+=(
      "${_network}"
    )
    shift
  done
  _command_args+=(
    "$@"
  )
  _node_run_opts+=(
    -r
      "${_retries_max}"
  )
  for _target_network \
    in "${_target_networks[@]}"; do
    _rpc_backend_get \
      "${_target_network}" \
      "${_rpc_selection}"
    if [[ "${_target_command}" == "get" ]]; then
      "_key_${_target_command}" \
        "${_target_key}"
      if [[ "${_target_key}" == "name" ]]; then
        return \
          0
      fi
    elif [[ "${_target_command}" == "send" ]]; then
      _target_address="${_target_key}"
      _target_amount="${_target_value}"
      _balance_send \
        "${_currency_type}" \
        "${_currency_address}" \
        "${_target_address}" \
        "${_target_amount}"
    elif [[ "${_target_command}" == "approve" ]]; then
      echo \
        "WIP"
      # TODO: write approve function
      # _approve_call_opts_setup
      # evm-contract-call \
      #   "${_approve_call_opts[@]}" \
      #   "${}"
    else
      _msg=(
        "Unknown command '${_target_command}'."
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
    node-run \
      "${_node_run_opts[@]}" \
      "${_cmd}" \
      "${_args[@]}"
  done
}

_currency_type_auto_detect() {
  local \
    _currency_type
  _currency_type=""
  if [[ "${currency_address}" == "" ]]; then
    currency_type="gas"
  elif [[ "${currency_address}" != "" ]]; then
    currency_type="erc20"
  fi
  _set_override \
    "currency" \
    "type" \
    "${_currency_type}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/${app_name}"
  if [[ ! -v "override_cache_dir" ]]; then
    mkdir \
      -p \
      "${_dir}"
  fi
  _set_override \
    "cache" \
    "dir" \
    "${_dir}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _cache_dir_auto_detect
  if [[ "${target_networks[*]}" == "" ]]; then
    target_networks+=(
      100
    )
  fi
  networks_amount="${#target_networks[@]}"
  _set_override \
    "target" \
    "command" \
    "get"
  _set_override \
    "target" \
    "key" \
    "name"
  _set_override \
    "balance" \
    "lifespan" \
    "3600"
  _set_override \
    "retries" \
    "max" \
    "300"
  _set_override \
    "measure" \
    "unit" \
    "ether"
  _set_override \
    "networks" \
    "all" \
    "n"
  _set_override \
    "currency" \
    "address" \
    ""
  _currency_type_auto_detect
  _set_override \
    "rpc" \
    "selection" \
    "kirsh"
  _set_override \
    "explorer" \
    "selection" \
    "kirsh"
  # _set_override \
  #   "target" \
  #   "network" \
  #   "100"
  target_network="${target_networks[0]}"
  _api_key_auto_detect \
    "${target_network}" \
    "${explorer_selection}"
  _wallet_overrides_set \
    "evm-wallet" \
    "${wallet_name}" \
    "y"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

EVM network wallet

Usage:
  ${app_name}
    [options]
    <command>
      (<command_args>)

  commands:
    get
      <wallet_name>
      <key>
    set
      <wallet_name>
      <key>
      <value>
    send
      <address>
      <amount>

  keys:
    address
    balance
    seed

  networks:
    all those supported by
    'evm-chains-info' as
    well as direct RPC addresses

  options:
     -R <rpc_selection>       RPC selection method.
                              Default: ${rpc_selection}
     -S <explorer_selection>  Network explorer selection method.
                              Default: ${explorer_selection}
     -r <retries_max>         Maximum number of retries before
                              failing.
                              Default: ${retries_max}
     -u <measure_unit>        Measure unit. It can be
                              'ether' or 'wei'.
                              Default: ${measure_unit}
     -l <balance_lifespan>    Maximum threshold in seconds
                              from now after which to consider
                              balance to be outdated.
                              Default: ${balance_lifespan}

  send options:
     -t <currency_type>       Currency type.
                              It can be 'gas', 'erc20'.
     -C <currency>            Address of the ERC20
                              token on the network,
                              if type is 'erc20'.

  credentials options:
     -w <wallet_path>         Wallet path.
                              Default: ${wallet_path}
     -p <wallet_password>     Wallet password.
                              Default: ${wallet_password}
     -s <wallet_seed>         Wallet seed path.
                              Default: ${wallet_seed}
     -n <network>             EVM network name. Accepted values
                              are all those supported by
                              evm-chains-info and RPC addresses.
     -k <api_key>             Etherscan-like service key.
                              Default: ${api_key}

  libEVM options:
     -n <network>             EVM network name. Accepted values
                              are all those supported by
                              evm-chains-info and RPC addresses.

  application options:
     -h                       This message.
     -c                       Enable color output
     -v                       Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                  Call date:   ${call_date}"
  _msg_info "             Target command:   ${target_command}"
  _msg_info "                Wallet name:   ${wallet_name}"
  _msg_info "                 Target key:   ${target_key}"
  _msg_info "               Target value:   ${target_value}"
  _msg_info "               All networks:   ${networks_all}"
  _msg_info "       RPC selection method:   ${rpc_selection}"
  _msg_info "  Explorer selection method:   ${explorer_selection}"
  _msg_info "               Measure unit:   ${measure_unit}"
  _msg_info "           Balance lifespan:   ${balance_lifespan}"
  _msg_info "             Send options:"
  _msg_info "              Currency type:   ${currency_type}"
  _msg_info "           Currency address:   ${currency_address}"
  _msg_info "      Credentials options:"
  _msg_info "                Wallet path:   ${wallet_path}"
  _msg_info "            Wallet password:   ${wallet_password}"
  _msg_info "                Wallet seed:   ${wallet_seed}"
  _msg_info "                    API key:   ${api_key}"
  _msg_info "           LibEVM options:"
  _msg_info "             Target network:   ${target_network}"
  _msg_info "            Maximum retries:   ${retries_max}"
  _msg_info "      Application options:"
  _msg_info "            Cache directory:   ${cache_dir}"
}

_globals
_global_variables
_requirements
_libevm_global_variables
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
getopts_opts="$( \
  printf \
    "%s" \
    "S:E:a:r:u:l:" \
    "t:C:" \
    "$(_libevm_app_getopts_params_get)" \
    "n:" \
    "$(_wallet_getopts_params_get)" \
    "W:cvh")"
while \
  getopts \
    "${getopts_opts}" \
    arg; do
  _wallet_getopts_case
  _libevm_app_getopts_case
  case \
    "${arg}" in
    S) \
      override_rpc_selection="${OPTARG}" ;;
    E) \
      override_explorer_selection="${OPTARG}" ;;
    a) \
      override_networks_all="${OPTARG}" ;;
    r) \
      override_retries_max="${OPTARG}" ;;
    l) \
      override_balance_lifespan="${OPTARG}" ;;
    u) \
      override_measure_unit="${OPTARG}" ;;
    t) \
      override_currency_type="${OPTARG}" ;;
    C) \
      override_currency_address="${OPTARG}" ;;
    n) \
      target_networks+=(
        "${OPTARG}"
      ) ;;
      # override_target_network="${OPTARG}" ;;
    W) \
      override_cache_dir="${OPTARG}" ;;
    c) \
      override_color="y" ;;
    v) \
      override_quiet="n" ;;
    h) \
      _set_overrides && \
         _usage \
           0 ;;
    *) \
      if [[ " ${getopts_opts} " != *"${arg}"* ]]; then
        _msg_error \
          "Invalid argument '${arg}'." \
          0
        _usage \
          1
      fi ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( 0 < "$#" )); then
  target_command="${1}"
fi
if (( 1 < "$#" )); then
  wallet_name="${2}"
fi
if (( 2 < "$#" )); then
  target_key="${3}"
fi
if (( 3 < $# )); then
  target_value="${4}"
fi
shift \
  4 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${target_command}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${cache_dir}"
  "${networks_all}"
  "${rpc_selection}"
  "${api_key}"
  "${retries_max}"
  "${measure_unit}"
  "${balance_lifespan}"
  "${currency_type}"
  "${currency_address}"
  "${target_key}"
  "${target_value}"
  "${networks_amount}"
  "${target_networks[@]}"
)
_evm_wallet \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
