#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"
source \
  "${_lib}/libevm/libevm"

# shellcheck disable=SC2034
_global_variables() {
  call_date=''
  target_command=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  target_network=""
  api_key=""
  rpc_selection=""
  explorer_selection=""
  wallet_name=""
  target_key=""
  target_value=""
  command_args=()
  retries_max=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'node' \
    'nodejs'
  _check_cmd \
    "evm-chains-info"
  _check_cmd \
    "evm-chains-explorers"
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_balance_send_cmd() {
  local \
    _lib
  _lib="$( \
    _get_lib)/evm-wallet"
  echo \
    "${_lib}/balance-send"
}

_wallet_key_cmd() {
  local \
    _key="${1}" \
    _command="${2}" \
    _lib
  _lib="$( \
    _get_lib)/evm-wallet"
  echo \
    "${_lib}/${_key}-${_command}"
}

_network_setup() {
  local \
    _chain="${1}" \
    _selection="${2}" \
    _chain_name \
    _chain_id \
    _rpc \
    _msg=()
  _msg=(
    "looking for info on EVM blockchain"
    "'${_chain}'"
  )
  _msg_info \
    "${_msg[*]}"
  _chain_id="$( \
    evm-chains-info \
      -o \
        "id" \
      "${_chain}")"
  if [[ "${_chain_id}" != "" ]]; then
    _chain_name="$( \
      evm-chains-info \
        -o \
          "name" \
        "${_chain}" 2>/dev/null || \
        true)"
    _msg=(
      "Found blockchain '${_chain_name}'"
      "with id '${_chain_id}'"
      "Selecting RPC address with"
      "criterion '${_selection}'"
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="$( \
      evm-chains-info \
        -o \
          "rpc" \
        -s \
          "${_selection}" \
        "${_chain}")"
  elif [[ "${_chain_id}" == "" ]]; then
    _msg=(
      "Found no known blockchain for input"
      "'${_chain}', interpreting given input"
      "as an rpc address for the selected"
      "network."
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="${_chain}"
  fi
  _msg=(
    "Selected RPC address"
    "'${_rpc}'"
  )
  _msg_info \
    "${_msg[*]}"
  _network_backend="${_rpc}"
}

_key_get() {
  local \
    _key="${1}"
  if [[ "${_key}" == "address" ]] || \
     [[ "${_key}" == "balance" ]]; then
    _cmd="$( \
      "_wallet_key_cmd" \
        "${_key}" \
        "get")"
    _args+=(
      "${quiet}"
      "${_wallet_seed}"
      "${_network_backend}"
      "${_api_key_path}"
    )
  elif [[ "${_key}" == "seed" ]]; then
    cat \
      "${_wallet_seed}"
    exit \
      0
  elif [[ "${_key}" == "name" ]]; then
    echo \
      "${wallet_name}"
    return \
      0
  fi
}

_balance_send() {
  local \
    _target_address="${1}" \
    _target_amount="${2}"
  _cmd="$( \
    _balance_send_cmd)"
  _args+=(
    "${quiet}"
    "${_wallet_seed}"
    "${_target_address}"
    "${_target_amount}"
    "${_network_backend}"
    "${_api_key_path}"
  )
}

_evm_wallet() {
  local \
    _target_command="${1}" \
    _wallet_path="${2}" \
    _wallet_password="${3}" \
    _wallet_seed="${4}" \
    _network="${5}" \
    _rpc_selection="${6}" \
    _api_key_path="${7}" \
    _retries_max="${8}" \
    _target_key="${9}" \
    _target_value="${10}" \
    _command_args=() \
    _msg=() \
    _cmd \
    _args=() \
    _network_backend \
    _node_run_opts=()
  shift \
    10
  _command_args+=(
    "$@"
  )
  _node_run_opts+=(
    "${_retries_max}"
  )
  _network_setup \
    "${_network}" \
    "${_rpc_selection}"
  if [[ "${_target_command}" == "get" ]]; then
    "_key_${_target_command}" \
      "${_target_key}"
    if [[ "${_target_key}" == "name" ]]; then
      return \
        0
    fi
  elif [[ "${_target_command}" == "send" ]]; then
    _balance_send \
      "${_target_key}" \
      "${_target_value}"
  else
    _msg=(
      "unknown command '${_target_command}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  node-run \
    "${_node_run_opts[@]}" \
    "${_cmd}" \
    "${_args[@]}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "retries" \
    "max" \
    300
  _set_override \
    "target" \
    "network" \
    "Gnosis"
  _set_override \
    "target" \
    "command" \
    "get"
  _set_override \
    "rpc" \
    "selection" \
    "kirsh"
  _set_override \
    "explorer" \
    "selection" \
    "kirsh"
  _api_key_auto_detect \
    "${target_network}" \
    "${explorer_selection}"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "evm-wallet" \
         "${wallet_name}")"
  _secret_auto_detect \
    "seed" \
    "seed" \
    "evm-wallet" \
    "${wallet_name}"
  _secret_auto_detect \
    "password" \
    "plain" \
    "evm-wallet" \
    "${wallet_name}"
  _set_override \
    "target" \
    "key" \
    "name"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

EVM network wallet

Usage:
  $(_get "app" "name")
    [options]
    <command>
      (<command_args>)

  commands:
    get
      <wallet_name>
      <key>
    set
      <wallet_name>
      <key>
      <value>
    send
      <address>
      <amount>

  keys:
    address
    balance

  networks:
    all those supported by
    'evm-chains-info' as
    well as directly RPC address

  options:
     -w <wallet_path>         Wallet path.
                              Default: ${wallet_path}
     -p <wallet_password>     Wallet password.
                              Default: ${wallet_password}
     -s <wallet_seed>         Wallet seed path.
                              Default: ${wallet_seed}
     -n <network>             EVM network name. Accepted values
                              are all those supported by
                              evm-chains-info and RPC addresses.
     -k <api_key>             Etherscan-like service key.
                              Default: ${api_key}
     -R <rpc_selection>       RPC selection method.
                              Default: ${rpc_selection}
     -S <explorer_selection>  Network explorer selection method.
                              Default: ${explorer_selection}
     -r <retries_max>         Maximum number of retries before
                              failing.
                              Default: ${retries_max}

     -h                       This message.
     -c                       Enable color output
     -v                       Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _seed \
    _seed_show
  _seed="$( \
    _get \
      "wallet" \
      "seed")"
  if [[ "${_seed}" != "" ]]; then
    _seed_show="*******"
  fi
  _msg_info "${app_name} configuration"
  _msg_info "                  Call date:   ${call_date}"
  _msg_info "                Wallet path:   ${wallet_path}"
  _msg_info "            Wallet password:   ${wallet_password}"
  _msg_info "                Wallet seed:   ${wallet_seed}"
  _msg_info "             Target network:   ${target_network}"
  _msg_info "       RPC selection method:   ${rpc_selection}"
  _msg_info "  Explorer selection method:   ${explorer_selection}"
  _msg_info "                    API key:   ${api_key}"
  _msg_info "            Maximum retries:   ${retries_max}"
  _msg_info "             Target command:   ${target_command}"
  _msg_info "                 Target key:   ${target_key}"
  _msg_info "               Target value:   ${target_value}"
}

_globals
_global_variables
_requirements
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
while \
  getopts \
    'w:p:s:n:S:E:k:r:cvh?' \
    arg; do
  case \
    "${arg}" in
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    S) override_rpc_selection="${OPTARG}" ;;
    E) override_explorer_selection="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    r) override_retries_max="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( 0 < $# )); then
  _set \
    "target" \
    "command" \
    "${1}"
fi
if (( 1 < $# )); then
  _set \
    "wallet" \
    "name" \
    "${2}"
fi
if (( 2 < $# )); then
  _set \
    "target" \
    "key" \
    "${3}"
fi
if (( 3 < $# )); then
  _set \
    "target" \
    "value" \
    "${4}"
fi
shift \
  4 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${target_command}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${rpc_selection}"
  "${api_key}"
  "${retries_max}"
  "${target_key}"
  "${target_value}"
)
_evm_wallet \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
